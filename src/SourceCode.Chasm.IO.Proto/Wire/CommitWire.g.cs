// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommitWire.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SourceCode.Mamba.CasRepo.IO.Proto.Wire {

  /// <summary>Holder for reflection information generated from CommitWire.proto</summary>
  public static partial class CommitWireReflection {

    #region Descriptor
    /// <summary>File descriptor for CommitWire.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommitWireReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDb21taXRXaXJlLnByb3RvGg90aW1lc3RhbXAucHJvdG8aDlNoYTFXaXJl",
            "LnByb3RvIokBCgpDb21taXRXaXJlEhoKB1BhcmVudHMYASADKAsyCS5TaGEx",
            "V2lyZRIZCgZUcmVlSWQYAiABKAsyCS5TaGExV2lyZRItCglDb21taXRVdGMY",
            "AyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUKDUNvbW1pdE1l",
            "c3NhZ2UYBCABKAlCKaoCJlNvdXJjZUNvZGUuTWFtYmEuQ2FzUmVwby5JTy5Q",
            "cm90by5XaXJlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1WireReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.CommitWire), global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.CommitWire.Parser, new[]{ "Parents", "TreeId", "CommitUtc", "CommitMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommitWire : pb::IMessage<CommitWire> {
    private static readonly pb::MessageParser<CommitWire> _parser = new pb::MessageParser<CommitWire>(() => new CommitWire());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitWire> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.CommitWireReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitWire() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitWire(CommitWire other) : this() {
      parents_ = other.parents_.Clone();
      TreeId = other.treeId_ != null ? other.TreeId.Clone() : null;
      CommitUtc = other.commitUtc_ != null ? other.CommitUtc.Clone() : null;
      commitMessage_ = other.commitMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitWire Clone() {
      return new CommitWire(this);
    }

    /// <summary>Field number for the "Parents" field.</summary>
    public const int ParentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire> _repeated_parents_codec
        = pb::FieldCodec.ForMessage(10, global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire.Parser);
    private readonly pbc::RepeatedField<global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire> parents_ = new pbc::RepeatedField<global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire> Parents {
      get { return parents_; }
    }

    /// <summary>Field number for the "TreeId" field.</summary>
    public const int TreeIdFieldNumber = 2;
    private global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire treeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire TreeId {
      get { return treeId_; }
      set {
        treeId_ = value;
      }
    }

    /// <summary>Field number for the "CommitUtc" field.</summary>
    public const int CommitUtcFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp commitUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CommitUtc {
      get { return commitUtc_; }
      set {
        commitUtc_ = value;
      }
    }

    /// <summary>Field number for the "CommitMessage" field.</summary>
    public const int CommitMessageFieldNumber = 4;
    private string commitMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommitMessage {
      get { return commitMessage_; }
      set {
        commitMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitWire);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitWire other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parents_.Equals(other.parents_)) return false;
      if (!object.Equals(TreeId, other.TreeId)) return false;
      if (!object.Equals(CommitUtc, other.CommitUtc)) return false;
      if (CommitMessage != other.CommitMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= parents_.GetHashCode();
      if (treeId_ != null) hash ^= TreeId.GetHashCode();
      if (commitUtc_ != null) hash ^= CommitUtc.GetHashCode();
      if (CommitMessage.Length != 0) hash ^= CommitMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      parents_.WriteTo(output, _repeated_parents_codec);
      if (treeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TreeId);
      }
      if (commitUtc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CommitUtc);
      }
      if (CommitMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CommitMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parents_.CalculateSize(_repeated_parents_codec);
      if (treeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreeId);
      }
      if (commitUtc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommitUtc);
      }
      if (CommitMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitWire other) {
      if (other == null) {
        return;
      }
      parents_.Add(other.parents_);
      if (other.treeId_ != null) {
        if (treeId_ == null) {
          treeId_ = new global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire();
        }
        TreeId.MergeFrom(other.TreeId);
      }
      if (other.commitUtc_ != null) {
        if (commitUtc_ == null) {
          commitUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CommitUtc.MergeFrom(other.CommitUtc);
      }
      if (other.CommitMessage.Length != 0) {
        CommitMessage = other.CommitMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            parents_.AddEntriesFrom(input, _repeated_parents_codec);
            break;
          }
          case 18: {
            if (treeId_ == null) {
              treeId_ = new global::SourceCode.Mamba.CasRepo.IO.Proto.Wire.Sha1Wire();
            }
            input.ReadMessage(treeId_);
            break;
          }
          case 26: {
            if (commitUtc_ == null) {
              commitUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(commitUtc_);
            break;
          }
          case 34: {
            CommitMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
